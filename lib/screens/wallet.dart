import 'dart:async';
import 'package:flutter/material.dart';
import 'package:extended_image/extended_image.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:intl/intl.dart';
import 'package:loading_more_list/loading_more_list.dart';
import 'package:pull_to_refresh_notification/pull_to_refresh_notification.dart';
import 'package:extended_list/extended_list.dart';
import 'package:minsk8/import.dart';

class WalletScreen extends StatefulWidget {
  static WalletData sourceList;

  @override
  WalletScreenState createState() {
    return WalletScreenState();
  }
}

class WalletScreenState extends State<WalletScreen> {
  static bool _isFirst = true;
  static bool _isOpen1 = false;
  static bool _isOpen2 = false;

  @override
  void initState() {
    super.initState();
    if (_isFirst) {
      _isFirst = false;
    } else {
      WalletScreen.sourceList.refresh(true);
    }
    if (_isOpen1) {
      _isOpen2 = true;
    } else {
      _isOpen1 = true;
    }
  }

  @override
  void dispose() {
    if (!_isOpen2) {
      WalletScreen.sourceList.clear();
    }
    if (_isOpen2) {
      _isOpen2 = false;
    } else {
      _isOpen1 = false;
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('–î–≤–∏–∂–µ–Ω–∏–µ –ö–∞—Ä–º—ã'),
      ),
      body: PullToRefreshNotification(
        onRefresh: _onRefresh,
        maxDragOffset: kMaxDragOffset,
        child: Stack(
          children: [
            LoadingMoreCustomScrollView(
              rebuildCustomScrollView: true,
              // in case list is not full screen and remove ios Bouncing
              physics: AlwaysScrollableClampingScrollPhysics(),
              slivers: [
                LoadingMoreSliverList(SliverListConfig<WalletItem>(
                  extendedListDelegate: ExtendedListDelegate(
                    collectGarbage: (List<int> garbages) {
                      garbages.forEach((index) {
                        final unit =
                            WalletScreen.sourceList[index].payment?.unit;
                        if (unit == null) return;
                        final image = unit.images[0];
                        final provider = ExtendedNetworkImageProvider(
                          image.getDummyUrl(unit.id),
                        );
                        provider.evict();
                      });
                    },
                  ),
                  itemBuilder:
                      (BuildContext context, WalletItem item, int index) {
                    if (item.displayDate != null) {
                      return Container(
                        alignment: Alignment.center,
                        padding: EdgeInsets.all(8),
                        child: Container(
                          child: Text(
                            item.displayDate,
                            style: TextStyle(
                              fontSize: kFontSize,
                              fontWeight: FontWeight.w600,
                              color: Colors.black.withOpacity(0.8),
                            ),
                          ),
                          padding:
                              EdgeInsets.symmetric(vertical: 4, horizontal: 8),
                          decoration: BoxDecoration(
                            color: Colors.grey[300],
                            borderRadius: BorderRadius.all(
                              Radius.circular(kFontSize),
                            ),
                          ),
                        ),
                      );
                    }
                    final payment = item.payment;
                    var textData = {
                      AccountValue.start:
                          '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –õ–æ–≤–∏—Ç–µ {{value}} –ö–∞—Ä–º—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ - –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è. –û—Ç–¥–∞–π—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–µ–Ω—É–∂–Ω–æ–µ, —á—Ç–æ–±—ã –∑–∞–±–∏—Ä–∞—Ç—å —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –ª–æ—Ç—ã. –ù–µ –∂–¥–∏—Ç–µ! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ª–æ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
                      AccountValue.invite:
                          '–ü–æ–ª—É—á–µ–Ω–æ {{value}} –ö–∞—Ä–º—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {{member}}. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –µ—â—ë –¥—Ä—É–∑–µ–π!',
                      AccountValue.unfreeze: [
                        '–†–∞–∑–º–æ—Ä–æ–∂–µ–Ω–æ {{value}} –ö–∞—Ä–º—ã. –ñ–µ–ª–∞–µ–º –Ω–∞–π—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!',
                        '–†–∞–∑–º–æ—Ä–æ–∂–µ–Ω–æ {{value}} –ö–∞—Ä–º—ã. –ñ–µ–ª–∞–µ–º –Ω–∞–π—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å —Ö–æ—Ä–æ—à–µ–µ! üòä',
                        '–†–∞–∑–º–æ—Ä–æ–∂–µ–Ω–æ {{value}} –ö–∞—Ä–º—ã. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –≤ –æ–∂–∏–¥–∞–Ω–∏–µ" –Ω–∞ –ª–æ—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø–æ—Ö–æ–∂–∏—Ö!',
                      ],
                      AccountValue.freeze:
                          '–°—Ç–∞–≤–∫–∞ –Ω–∞ –ª–æ—Ç –ø—Ä–∏–Ω—è—Ç–∞! –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ {{value}} –ö–∞—Ä–º—ã. –û–Ω–∞ –±—É–¥–µ—Ç —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω–∞ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é —Ç–∞–π–º–µ—Ä–∞ –∏–ª–∏ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –æ—Ç –ª–æ—Ç–∞. –£–¥–∞—á–∏!',
                      AccountValue.limit:
                          '–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ—Ç –ø—Ä–∏–Ω—è—Ç–∞. –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –ª–æ—Ç—ã "–î–∞—Ä–æ–º" ‚Äî {{limit}} –≤ –¥–µ–Ω—å. –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è ‚Äî {{value}}. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç ‚Äî –ø–æ–≤—ã—Å—å –ö–∞—Ä–º—É: —á—Ç–æ-–Ω–∏–±—É–¥—å –æ—Ç–¥–∞–π –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π.',
                      AccountValue.profit:
                          '–ü–æ–ª—É—á–µ–Ω–æ {{value}} –ö–∞—Ä–º—ã –∑–∞ –ª–æ—Ç. –û—Ç–¥–∞–π—Ç–µ –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–µ–Ω—É–∂–Ω–æ–µ!',
                    }[payment.account];
                    if (textData is List) {
                      var textVariant = payment.textVariant;
                      if (textVariant == null ||
                          textVariant >= (textData as List).length) {
                        textVariant = 0;
                      }
                      textData = (textData as List)[textVariant];
                    }
                    Function action;
                    Widget image;
                    String text = textData;
                    <AccountValue, Function>{
                      AccountValue.start: () {
                        action = _getBalanceAction;
                        // TODO: –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                        image = Icon(
                          FontAwesomeIcons.gift,
                          color: Colors.deepOrangeAccent,
                        );
                        text = interpolate(text, params: {
                          'value': payment.value,
                        });
                      },
                      AccountValue.invite: () {
                        action = _getBalanceAction;
                        image = AspectRatio(
                          aspectRatio: 1,
                          child: ExtendedImage.network(
                            payment.invitedMember.avatarUrl,
                            fit: BoxFit.cover,
                            shape: BoxShape.circle,
                            enableLoadState: false,
                          ),
                        );
                        text = interpolate(text, params: {
                          'value': payment.value,
                          'member': payment.invitedMember.nickname,
                        });
                      },
                      AccountValue.unfreeze: () {
                        action = _getUnitAction(payment.unit);
                        image = _getUnitImage(payment.unit);
                        text = interpolate(text, params: {
                          'value': payment.value,
                        });
                      },
                      AccountValue.freeze: () {
                        action = _getUnitAction(payment.unit);
                        image = _getUnitImage(payment.unit);
                        text = interpolate(text, params: {
                          'value': payment.value,
                        });
                      },
                      AccountValue.limit: () {
                        action = _getUnitAction(payment.unit);
                        image = _getUnitImage(payment.unit);
                        text = interpolate(text, params: {
                          'value': payment.value,
                          'limit': 7,
                        });
                      },
                      AccountValue.profit: () {
                        action = _getUnitAction(payment.unit);
                        image = _getUnitImage(payment.unit);
                        text = interpolate(text, params: {
                          'value': payment.value,
                        });
                      },
                    }[payment.account]();

                    return Material(
                      child: InkWell(
                        onTap: action,
                        child: ListTile(
                          leading: CircleAvatar(
                            child: image,
                            backgroundColor: Colors.white,
                          ),
                          title: Text(text),
                          subtitle: Text(
                            DateFormat.jm('ru_RU').format(
                              payment.createdAt.toLocal(),
                            ),
                          ),
                          dense: true,
                        ),
                      ),
                    );
                  },
                  sourceList: WalletScreen.sourceList,
                  indicatorBuilder: (
                    BuildContext context,
                    IndicatorStatus status,
                  ) {
                    return buildListIndicator(
                      context: context,
                      status: status,
                      sourceList: WalletScreen.sourceList,
                    );
                  },
                  lastChildLayoutType: LastChildLayoutType.foot,
                )),
              ],
            ),
            PullToRefreshContainer((PullToRefreshScrollNotificationInfo info) {
              final offset = info?.dragOffset ?? 0.0;
              return Positioned(
                top: offset - kToolbarHeight,
                left: 0,
                right: 0,
                child: Center(child: info?.refreshWiget),
              );
            }),
          ],
        ),
      ),
    );
  }

  Future<bool> _onRefresh() async {
    final sourceList = WalletScreen.sourceList;
    return await sourceList.handleRefresh();
  }

  Widget _getUnitImage(UnitModel unit) {
    return AspectRatio(
      aspectRatio: 1,
      child: ExtendedImage.network(
        unit.images[0].getDummyUrl(unit.id),
        fit: BoxFit.cover,
        shape: BoxShape.circle,
        enableLoadState: false,
      ),
    );
  }

  Function _getUnitAction(UnitModel unit) {
    return () {
      Navigator.pushNamed(
        context,
        '/unit',
        arguments: UnitRouteArguments(
          unit,
          member: unit.member,
        ),
      );
    };
  }

  void _getBalanceAction() {
    showDialog(
      context: context,
      child: BalanceDialog(),
    ).then((value) {
      if (value == null) return;
      Navigator.pushReplacement(
        context,
        buildInitialRoute('/wallet')(
          (_) => WalletScreen(),
        ),
      );
    });
  }
}
